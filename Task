package testforjava;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.stream.Collectors;
//C:\Users\zhakypbekov_30855\Desktop\test1//Записи.txt
public class Task {

	 private static ArrayList<File> listWithFileNames = new ArrayList<>();
	 public static void main(String[] args) throws IOException {
			
			File sourse = new File("C:\\Users\\zhakypbekov_30855\\Desktop\\test1");
			File origFile = new File("C:\\Users\\zhakypbekov_30855\\Desktop\\test1\\Записи2.txt");		
			File resultFile = new File(origFile.getParent() + "\\1.txt");
			if(!origFile.exists())
				System.out.println(origFile.createNewFile());
			FileUtils.renameFile(origFile, resultFile);
			try(FileOutputStream outStream = new FileOutputStream(resultFile)){
				getListFiles(sourse.getAbsolutePath());
				if(listWithFileNames.size() != 0){
					Collections.sort(listWithFileNames, new Comparator<File>(){

						@Override
						public int compare(File f1, File f2) {
							return f1.getName().compareTo(f2.getName());
						}
					});
				}
				for(File f : listWithFileNames){
					
					FileInputStream inputStreame = new FileInputStream(f);
					while(inputStreame.available() > 0){
						
						outStream.write(inputStreame.read());
						outStream.flush();
					}
					outStream.write(System.lineSeparator().getBytes());
				}
				
			}
			
		}
	    
	    
	    
	    
	    public static void getListFiles(String str) {
	        File f = new File(str);
	        if(f.isFile()){
	        	 listWithFileNames.add(f );
	        }else {
	        	for (File s : f.listFiles()) {
		            if (s.isFile()) {
		                if(s.length() > 50) 
		                	FileUtils.deleteFile(s);
		                else
		                	listWithFileNames.add(s);
		            } else if (s.isDirectory()) {
		                getListFiles(s.getAbsolutePath());      
		            }
		        }
	        }
	        
	    }
	}


class FileUtils {

    public static void deleteFile(File file) {
        if (!file.delete()) System.out.println("Can not delete file with name " + file.getName());
    }

    public static void renameFile(File source, File destination) {
        if (!source.renameTo(destination)) System.out.println("Can not rename file with name " + source.getName());
    }
}
